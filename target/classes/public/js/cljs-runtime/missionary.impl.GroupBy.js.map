{"version":3,"sources":["missionary/impl/GroupBy.cljs"],"mappings":"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","names":["unused__11925__auto__","self__","G__38518","js/Error","args38517","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","missionary.impl.GroupBy/Process","missionary.impl.GroupBy/->Process","keyfn","notifier","terminator","key","value","input","table","load","live","busy","done","p","missionary.impl.GroupBy/kill","missionary.impl.GroupBy/sample","G__38531","args38530","missionary.impl.GroupBy/Group","missionary.impl.GroupBy/->Group","process","g","missionary.impl.GroupBy/cancel","missionary.impl.GroupBy/consume","fexpr__38533","missionary.impl.GroupBy/step","i","m","missionary.impl.GroupBy/insert","ts","ls","l","cljs.core.object_array","j","temp__5808__auto__","h","cljs.core/hash","missionary.impl.GroupBy/group","k","n","t","fexpr__38535","temp__5806__auto__","cljs.core._EQ_","fexpr__38544","missionary.impl.GroupBy/transfer","cb","cljs.core/not","e38545","G__38548","fexpr__38547","cljs.core/deref","e","fexpr__38546","e38549","_","cljs.core/->MapEntry","cljs.core.partial","x","fexpr__38550","js/missionary.Cancelled","missionary.impl.GroupBy/run","f","fexpr__38552","G__38553","G__38554"],"sourcesContent":["(ns ^:no-doc missionary.impl.GroupBy\n  (:import missionary.Cancelled))\n\n(declare kill sample cancel consume)\n\n(deftype Process [keyfn notifier terminator\n                  key value input table\n                  ^number load\n                  ^boolean live\n                  ^boolean busy\n                  ^boolean done]\n  IFn\n  (-invoke [p] (kill p) nil)\n  IDeref\n  (-deref [p] (sample p)))\n\n(deftype Group [process key notifier terminator]\n  IFn\n  (-invoke [g] (cancel g) nil)\n  IDeref\n  (-deref [g] (consume g)))\n\n(defn kill [^Process p]\n  (when (.-live p)\n    (set! (.-live p) false)\n    ((.-input p))))\n\n(defn step [^number i ^number m]\n  (bit-and (inc i) m))\n\n(defn insert [^Process p ^number i g]\n  (let [table (.-table p)\n        ts (alength table)\n        ls (bit-shift-left ts 1)]\n    (aset table i g)\n    (when (<= ls (* 3 (set! (.-load p) (inc (.-load p)))))\n      (let [l (set! (.-table p) (object-array ls))\n            m (dec ls)]\n        (loop [j 0]\n          (when (< j ts)\n            (when-some [h (aget table j)]\n              (loop [i (bit-and (hash (.-key h)) m)]\n                (if (nil? (aget l i))\n                  (aset l i h)\n                  (recur (step i m)))))\n            (recur (inc j))))))))\n\n(defn group [^Process p k n t]\n  (let [g (->Group nil k n t)]\n    ((if-some [table (.-table p)]\n       (let [m (dec (alength table))]\n         (loop [i (bit-and (hash k) m)]\n           (if-some [h (aget table i)]\n             (when-not (= k (.-key h))\n               (recur (step i m)))\n             (when (= k (.-key p))\n               (insert (set! (.-process g) p) i g))))\n         n) t)) g))\n\n(defn cancel [^Group g]\n  (when-some [^Process p (.-process g)]\n    (when (.-live p)\n      (set! (.-process g) nil)\n      (let [k (.-key g)\n            table (.-table p)\n            m (dec (alength table))\n            i (loop [i (bit-and (hash k) m)]\n                (if (identical? g (aget table i))\n                  i (recur (step i m))))]\n        (aset table i nil)\n        (set! (.-load p) (dec (.-load p)))\n        (loop [i (step i m)]\n          (when-some [h (aget table i)]\n            (let [j (bit-and (hash (.-key h)) m)]\n              (when-not (== i j)\n                (aset table i nil)\n                (loop [j j]\n                  (if (nil? (aget table j))\n                    (aset table j h)\n                    (recur (step j m))))))\n            (recur (step i m))))\n        ((if (= k (.-key p))\n           (.-notifier p)\n           (.-notifier g)))))))\n\n(defn transfer [^Process p]\n  (when-some [cb (loop []\n                   (when (set! (.-busy p) (not (.-busy p)))\n                     (if (.-done p)\n                       (.-terminator p)\n                       (if (identical? p (.-value p))\n                         (try\n                           (let [k (set! (.-key p) ((.-keyfn p) (set! (.-value p) @(.-input p))))\n                                 table (.-table p)\n                                 m (dec (alength table))]\n                             (loop [i (bit-and (hash k) m)]\n                               (if-some [h (aget table i)]\n                                 (if (= k (.-key h))\n                                   (.-notifier h)\n                                   (recur (step i m)))\n                                 (.-notifier p))))\n                           (catch :default e\n                             ((.-input p))\n                             (set! (.-value p) e)\n                             (.-notifier p)))\n                         (do (try @(.-input p) (catch :default _))\n                             (recur))))))] (cb)))\n\n(defn sample [^Process p]\n  (let [k (.-key p)]\n    (if (identical? k p)\n      (do (transfer p) (throw (.-value p)))\n      (->MapEntry k (partial group p k) nil))))\n\n(defn consume [^Group g]\n  (if-some [^Process p (.-process g)]\n    (let [x (.-value p)]\n      (set! (.-value p) p)\n      (set! (.-key p) p)\n      (transfer p) x)\n    (do ((.-terminator g))\n        (throw (Cancelled. \"Group consumer cancelled.\")))))\n\n(defn run [k f n t]\n  (let [p (->Process k n nil nil nil nil (object-array 8) 0 true true false)]\n    (set! (.-terminator p)\n      (fn []\n        (let [table (.-table p)]\n          (loop [i 0]\n            (when (< i (alength table))\n              (when-some [g (aget table i)]\n                (set! (.-process g) nil)\n                ((.-terminator g)))\n              (recur (inc i))))\n          (set! (.-table p) nil) (t))))\n    (set! (.-key p) p)\n    (set! (.-value p) p)\n    (set! (.-input p)\n      (f #(transfer p)\n        #(do (set! (.-done p) true)\n             (transfer p))))\n    (transfer p) p))\n"]}