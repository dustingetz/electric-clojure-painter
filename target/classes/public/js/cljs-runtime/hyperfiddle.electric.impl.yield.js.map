{"version":3,"sources":["hyperfiddle/electric/impl/yield.cljc"],"mappings":"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","names":["unused__11925__auto__","self__","G__40980","js/Error","args40976","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","hyperfiddle.electric.impl.yield/Yield","hyperfiddle.electric.impl.yield/->Yield","check","notifier","terminator","state","this","hyperfiddle.electric.impl.yield/cancel","hyperfiddle.electric.impl.yield/sample","hyperfiddle.electric.impl.yield/transfer","r","f","s","cljs.core/not","fexpr__40991","g","fexpr__40993","i","cljs.core/deref","e41003","_","fexpr__41004","e41005","fexpr__41007","e41010","x","temp__5806__auto__",">e","fexpr__41011","G__41013","cljs.core.object_array","G__41014","G__41015","G__41016","e","hyperfiddle.electric.impl.yield/yield",">x","n","t","G__41017","G__41018","G__41019","G__41020"],"sourcesContent":["(ns hyperfiddle.electric.impl.yield\n  #?(:clj (:import (clojure.lang IFn IDeref))))\n\n(declare cancel sample)\n(deftype Yield [check notifier terminator state]\n  IFn\n  (#?(:clj invoke :cljs -invoke) [this]\n    (locking this (cancel state)))\n  IDeref\n  (#?(:clj deref :cljs -deref) [this]\n    (locking this (sample this))))\n\n(defn transfer [^Yield r ^objects f]\n  (let [^objects s (.-state r)]\n    (loop []\n      (when (aset f (int 1) (not (aget f (int 1))))\n        (if (aget f (int 2))\n          (do (when (zero? (aset s (int 3) (dec (aget s (int 3)))))\n                ((.-terminator r))) (recur))\n          (let [^objects g (aget s (int 4))]\n            (if (identical? f g)\n              ((.-notifier r))\n              (if (and (identical? f s) (some? g))\n                (let [i (aget g (int 0))]\n                  (aset s (int 4) s) (i)\n                  (if (aget g (int 1))\n                    (do (try @i (catch #?(:clj Throwable :cljs :default) _))\n                        (transfer r g)) ((.-notifier r))))\n                (let [i (aget f (int 0))]\n                  (try @i (catch #?(:clj Throwable :cljs :default) _))\n                  (recur))))))))))\n\n(defn cancel [^objects s]\n  ((aget s (int 0))))\n\n(defn sample [^Yield r]\n  (let [^objects s (.-state r)\n        ^objects f (aget s (int 4))]\n    (try\n      (let [x @(aget f (int 0))]\n        (if (identical? f s)\n          (if-some [>e ((.-check r) x)]\n            (let [f (doto (object-array 3)\n                      (aset (int 1) true)\n                      (aset (int 2) false))\n                  i (>e #(locking r (transfer r f))\n                      #(locking r\n                         (aset f (int 2) true)\n                         (transfer r f)))]\n              (aset f (int 0) i)\n              (aset s (int 4) f)\n              (aset s (int 3) (inc (aget s (int 3))))\n              (doto (aset f (int 1) (not (aget f (int 1))))\n                (assert \"Initialization failure.\"))\n              (try @i (finally (transfer r f)))) x) x))\n      (catch #?(:clj Throwable :cljs :default) e\n        (cancel s) (aset s (int 4) nil) (throw e))\n      (finally (transfer r f)))))\n\n(defn yield \"\nReturns a continuous flow producing values produced by continuous flow >x, passing each sampled value to function f.\nIf the result is nil, the value is returned as is, otherwise the result is run as a flow and its values are output\nuntil the input flow becomes ready again, at which point the recovery flow is cancelled.\"\n  [f >x]\n  (fn [n t]\n    (let [s (doto (object-array 5)\n              (aset (int 1) true)\n              (aset (int 2) false)\n              (aset (int 3) 1))\n          r (->Yield f n t s)]\n      (aset s (int 4) s)\n      (aset s (int 0)\n        (>x #(locking r (transfer r s))\n          #(locking r\n             (aset s (int 2) true)\n             (transfer r s))))\n      (doto r (transfer s)))))\n\n(comment\n  (require '[missionary.core :as m])\n  (def !e (atom \"odd\"))\n  (def !x (atom 0))\n  (def it\n    ((yield\n       (fn [x] (when (odd? x) (m/watch !e)))\n       (m/watch !x))\n     #(prn :ready) #(prn :done)))\n  (it)\n  @it := 0\n  (swap! !x inc)\n  @it := \"odd\"\n  (reset! !e \"ODD\")\n  @it := \"ODD\"\n  (swap! !x inc)\n  @it := 2\n\n  )"]}