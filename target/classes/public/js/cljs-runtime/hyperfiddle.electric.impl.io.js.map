{"version":3,"sources":["hyperfiddle/electric/impl/io.cljc"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","com.cognitect.transit.types/UUID","hyperfiddle.electric.impl.io/write-opts","js/hyperfiddle.electric.Failure","cognitect.transit.write_handler","_","x","err","js/missionary.Cancelled","js/hyperfiddle.electric.Pending","js/hyperfiddle.electric.Remote","hyperfiddle.electric.debug/serializable","cljs.core/ex-data","cljs.core/ex-message","hyperfiddle.electric.impl.io/read-opts","cognitect.transit/read-handler","p__43712","vec__43716","seq__43717","cljs.core/seq","first__43718","cljs.core/first","cljs.core/next","tag","args","G__43719","cljs.core/Keyword","js/Error","vec__43721","cljs.core.nth","message","data","hyperfiddle.electric.debug.error","cljs.core.ex_info","vec__43724","or__5045__auto__","hyperfiddle.electric.impl.io/set-ints","cljs.core.partial","cljs.core/reduce-kv","r","i","n","offset","G__43736","hyperfiddle.electric.impl.io/encode-numbers","xs","required","cljs.core/count","G__43741","js/ArrayBuffer","js/DataView","hyperfiddle.electric.impl.io/decode-numbers","b","cljs.core/vec","js/hyperfiddle","js/hyperfiddle.electric","js/hyperfiddle.electric.impl","js/hyperfiddle.electric.impl.io","js/hyperfiddle.electric.impl.io.t_hyperfiddle$electric$impl$io43743","hyperfiddle.electric.impl.io/t_hyperfiddle$electric$impl$io43743","_43745","meta43744","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","hyperfiddle.electric.impl.io/->t_hyperfiddle$electric$impl$io43743","rf","l","v","G__43751","G__43752","hyperfiddle.electric.impl.io/transit-writer","cognitect.transit.writer","hyperfiddle.electric.impl.io/ddef","hyperfiddle.electric.impl.io/-last-error-for-repl","hyperfiddle.electric.impl.io/encode","e43757","cognitect.transit/write","hyperfiddle.logger.log_STAR_","G__43760","hyperfiddle.electric.impl.io/transit-reader","cognitect.transit.reader","hyperfiddle.electric.impl.io/decode","s","cognitect.transit/read","hyperfiddle.electric.impl.io/decode-str","e43770","G__43772","t","hyperfiddle.electric.impl.io/chunk-size","hyperfiddle.electric.impl.io/message-reader","?read","cr43774-state","cr43774-place-22","cr43774-place-32","cr43774-place-33","cr43774-place-34","cr43774-block-8","cr43774-exception","e43869","cr43774-place-7","e43885","cr43774-place-30","missionary.core/unpark","cr43774-place-31","cr43774-block-4","e43887","cr43774-place-28","cr43774-place-8","cr43774-place-9","cr43774-place-10","cr43774-place-35","cr43774-place-36","cr43774-block-10","e43891","cr43774-place-2","cr43774-place-4","cr43774-place-11","cr43774-place-12","cr43774-place-13","cljs.core/IVector","cr43774-place-14","e43907","cr43774-place-3","cr43774-block-2","missionary.core/park","e43922","cr43774-place-15","cr43774-place-16","cr43774-place-17","cr43774-place-18","cr43774-place-19","cr43774-place-20","cr43774-place-21","cr43774-place-23","cr43774-place-24","cr43774-place-25","cr43774-place-26","cr43774-place-27","cr43774-block-7","cr43774-block-5","e43925","cr43774-place-0","cr43774-place-1","cr43774-block-1","e43936","cr43774-place-29","cr43774-block-6","e43940","cr43774-place-5","cr43774-place-6","cr43774-block-9","cr43774-block-3","e43945","cr43774-place-37","cr43774-place-38","cr43774-place-39","cr43774-place-40","cr43774-place-41","cr43774-place-42","e43948","cloroutine.impl/coroutine","G__43969","cljs.core.object_array","cr43774-block-0","missionary.core/sp-run","G__43939","fexpr__43938","cljs.core/transient","G__43963","G__43964","fexpr__43962","cljs.core/conj!","G__43957","fexpr__43956","G__43906","fexpr__43905","cljs.core/persistent!","G__43903","G__43904","fexpr__43902","G__43915","fexpr__43914","G__43928","fexpr__43927","G__43930","G__43931","G__43933","fexpr__43929","cljs.core/reduce","G__43935","fexpr__43934","G__43875","fexpr__43874","p1__43970#","hyperfiddle.electric.impl.io/message-writer","write","cr43971-state","cr43971-place-29","cr43971-place-28","cr43971-place-42","cr43971-place-43","cr43971-place-44","cr43971-place-45","cr43971-block-6","cr43971-exception","e44124","cr43971-place-21","cr43971-place-46","cr43971-place-47","cr43971-block-1","e44128","cr43971-place-20","cr43971-place-33","cr43971-place-34","cr43971-place-35","cr43971-place-36","cr43971-place-37","cr43971-place-38","cljs.core/IMap","cr43971-place-39","cr43971-place-40","cr43971-place-41","e44130","cr43971-block-5","cr43971-place-50","cr43971-place-51","cr43971-place-52","cr43971-place-53","cr43971-place-54","cr43971-place-55","cr43971-place-56","cr43971-block-11","cr43971-block-9","e44137","cr43971-place-4","cr43971-place-5","cr43971-place-6","cr43971-place-7","cr43971-place-8","cr43971-place-9","cr43971-block-7","cr43971-block-2","e44141","cr43971-block-14","e44143","e44151","cr43971-place-64","cr43971-place-65","cr43971-place-66","cr43971-place-67","cr43971-place-68","cr43971-place-69","cr43971-place-70","cr43971-place-71","cr43971-place-72","cr43971-place-73","cr43971-block-12","e44157","cr43971-place-57","cr43971-place-58","cr43971-place-59","cr43971-place-60","cr43971-place-61","cr43971-place-62","cr43971-block-10","e44170","cr43971-place-63","cr43971-block-13","e44190","cr43971-place-30","cr43971-place-31","cr43971-place-32","e44199","cr43971-block-4","cr43971-place-48","cr43971-place-49","cr43971-block-8","e44210","cr43971-place-0","cr43971-place-1","cr43971-place-2","cr43971-place-3","e44215","cr43971-place-10","cr43971-place-11","cr43971-place-12","cr43971-place-13","cr43971-place-14","cr43971-place-15","cr43971-place-16","cr43971-place-17","cr43971-place-18","cr43971-place-19","cr43971-place-22","hyperfiddle.logger/log*","cr43971-place-23","cr43971-place-24","cr43971-place-25","cr43971-place-26","cr43971-place-27","cr43971-block-3","e44225","cr43971-place-74","cr43971-place-75","cr43971-place-76","cr43971-place-77","cr43971-place-78","e44254","G__44264","cr43971-block-0","G__44222","fexpr__44221","G__44218","fexpr__44217","cljs.core/pop","G__44234","fexpr__44233","G__44238","fexpr__44237","G__44240","fexpr__44239","G__44245","G__44246","G__44247","G__44248","fexpr__44244","G__44126","fexpr__44125","G__44207","fexpr__44206","G__44134","G__44135","G__44136","fexpr__44133","cljs.core/ex-info","G__44212","fexpr__44211","cljs.core/peek","G__44139","fexpr__44138","G__44168","fexpr__44167","G__44166","fexpr__44165","G__44161","G__44162","G__44163","fexpr__44160","cljs.core/subvec","G__44260","G__44261","fexpr__44259","G__44179","fexpr__44178","G__44173","fexpr__44172","hyperfiddle.electric.impl.io/decoder","G__44267","cljs.core._EQ_","cljs.core.conj","cljs.core.into","hyperfiddle.electric.impl.io/encoder","cljs.core.reduce","cljs.core.eduction","cljs.core.map","cljs.core.partition_all","G__44284","cljs.core/mod","G__44285","G__44286","var_args","G__44290","hyperfiddle.electric.impl.io/foreach"],"sourcesContent":[";; Facilities for encoding/decoding of Electric protocol messages.\n;; * Data frames can be arbitrary clojure data or Electric failures. Serialization is done via transit json, the failure\n;; error is preserved if it's an instance of `hyperfiddle.electric.Pending` or `hyperfiddle.electric.Cancelled`, otherwise\n;; the error is logged and turned into an instance of `hyperfiddle.electric.Remote`.\n;; * Control frames are vectors of signed integers. Serialization is the concatenation of the binary representation of\n;; these numbers as fixed-length 32-bit, big endian.\n\n(ns ^:no-doc hyperfiddle.electric.impl.io\n  (:require [missionary.core :as m]\n            [cognitect.transit :as t]\n            [hyperfiddle.logger :as log]\n            [hyperfiddle.electric.debug :as dbg]\n            #?(:cljs [com.cognitect.transit.types]))\n  (:import (missionary Cancelled)\n           (hyperfiddle.electric Failure Pending Remote)\n           #?(:clj (java.nio ByteBuffer))\n           #?(:clj (java.io ByteArrayInputStream ByteArrayOutputStream))\n           #?(:clj (clojure.lang IReduceInit))))\n\n#?(:cljs (extend-type com.cognitect.transit.types/UUID IUUID)) ; https://github.com/hyperfiddle/hyperfiddle/issues/728\n\n(def write-opts\n  {:handlers\n   {Failure\n    (t/write-handler\n      (fn [_] \"failure\")\n      (fn [x]\n        (let [err (.-error ^Failure x)]\n          (cond (instance? Cancelled err) [:cancelled]\n                (instance? Pending err)   [:pending]\n                (instance? Remote err)    [:remote (dbg/serializable (ex-data err))]\n                :else                     [:exception (ex-message err) (dbg/serializable (ex-data err))]))))}})\n\n(def read-opts\n  {:handlers\n   {\"failure\"\n    (t/read-handler\n      (fn [[tag & args]]\n        (case tag\n          :exception (let [[message data] args]\n                       (dbg/error (ex-info message data)))\n          :remote    (let [[data] args]\n                       (Failure. (ex-info \"Remote error\" (or data {}))))\n          :pending   (Failure. (Pending.))\n          :cancelled (Failure. (Cancelled.)))))}})\n\n(def set-ints\n  (partial reduce-kv\n    (fn [r i n]\n      (let [offset (bit-shift-left i 2)]\n        #?(:clj  (.putInt ^ByteBuffer r offset n)\n           :cljs (doto r (.setInt32 offset n)))))))\n\n(defn encode-numbers\n  \"Encode a control frame to a binary segment.\"\n  [xs]\n  (let [required (bit-shift-left (count xs) 2)] ; size of bytebuffer is 4 \u00d7 (count xs), so shift by 2\n    #?(:clj (set-ints (ByteBuffer/allocate required) xs)\n       :cljs (doto (js/ArrayBuffer. required)\n               (-> (js/DataView.) (set-ints xs))))))\n\n(defn decode-numbers\n  \"Decode a control frame from a binary segment.\"\n  [b]\n  (vec\n    (reify\n      #?(:clj IReduceInit :cljs IReduce)\n      #?(:clj (reduce [_ rf r]\n                (let [l (.limit ^ByteBuffer b)]\n                  (loop [r r, i (int 0)]\n                    (if (< i l)\n                      (recur (rf r (.getInt ^ByteBuffer b i))\n                        (unchecked-add-int i 4)) r))))\n         :cljs (-reduce [_ rf r]\n                 (let [l (.-byteLength b)\n                       v (js/DataView. b)]\n                   (loop [r r, i 0]\n                     (if (< i l)\n                       (recur (rf r (.getInt32 v i))\n                         (+ i 4)) r))))))))\n\n#?(:cljs (def transit-writer (t/writer :json write-opts)))\n\n(defn ddef [err] (def -last-error-for-repl err)) ; lol\n\n(defn encode\n  \"Encode a data frame to transit json\"\n  [x]\n  (try\n    #?(:clj (let [out (ByteArrayOutputStream.)]\n              (t/write (t/writer out :json write-opts) x)\n              (.toString out))\n       :cljs (t/write transit-writer x))\n    (catch #?(:clj Throwable, :cljs :default) err\n      ; 13:49:25.848 DEBUG h.p.io [qtp966786773-114] - Unserializable reference transfer:  datascript.db.TxReport@a1a5e94a\n      ; {:value #datascript.db.TxReport{:db-before #datascript/DB {:schema {}, :datoms [[1 :task/description buy milk  ...\n      (ddef err)\n      (do (log/debug \"Unserializable reference transfer: \"\n                     (str #_pr-str x)                       ; i.e. \"datascript.db.TxReport@b532aead\"\n                     #_{:value x}                           ; don't ask logger to pr-str the entire datascript database\n                     #_err)                                 ; don't spam log with scary error\n\n          (if (instance? Failure x)\n            (encode (Failure. (Remote.))) ; Failed to encode this exception, send a stub.\n            (encode nil))))))\n\n#?(:cljs (def transit-reader (t/reader :json read-opts)))\n\n(defn decode\n  \"Decode a data frame from transit json\"\n  [^String s]\n  #?(:clj (t/read (t/reader (ByteArrayInputStream. (.getBytes s \"UTF-8\")) :json read-opts))\n     :cljs (t/read transit-reader s)))\n\n(defn decode-str [x]\n  (try (doto (decode x) (->> (log/trace \"\ud83d\udd3d\")))\n    (catch #?(:clj Throwable :cljs :default) t\n      (throw (ex-info \"Failed to decode\" {:value x} t)))))\n\n; Jetty rejects websocket payloads larger than 65536 bytes by default\n; We\u2019ll chop messages if needed\n(def chunk-size (bit-shift-right 65536 2))\n\n(defn ^:deprecated message-reader [?read]\n  \"Returns a discrete flow of read Electric messages from provided task, emitting individual frames.\"\n  (m/sp\n    (loop [data (transient [])]\n      (let [x (m/? ?read)]\n        (if (string? x)\n          (recur (conj! data (decode-str x)))\n          (persistent!\n            (conj! data\n              (loop [x       x\n                     control (transient [])]\n                (let [xs      (decode-numbers x)\n                      control (reduce conj! control xs)]\n                  (if (< (count xs) chunk-size) ; final frame\n                    (persistent! control)\n                    (recur (m/? ?read) control)))))))))))\n\n\n(defn ^:deprecated message-writer\n  \"Returns a function taking an Electric message and returning a task writing it as individual frames using provided\n   function. Might cut a message into chunks if its size would exceed the server payload limit.\n   An empty message (0b) is written to notify the end of frame.\"\n  [write]\n  #(m/sp\n     (loop [xs (seq (pop %))]\n       (if-some [[x & xs] xs]\n         (do (log/trace \"\ud83d\udd3c\" x)\n           (m/? (write\n                  (try (encode x)\n                    (catch #?(:clj Throwable :cljs :default) t\n                      (throw (ex-info \"Failed to encode\" {:value x} t))))))\n           (recur xs))\n         (loop [xs (peek %)]\n           (if (>= (count xs) chunk-size)\n             (do (m/? (write (encode-numbers (subvec xs 0 chunk-size))))\n               (recur (subvec xs chunk-size)))\n             (m/? (write (encode-numbers xs)))))))))\n\n(defn ^:deprecated decoder\n  \"A transducer partitioning a sequence of network messages into Electric events.\"\n  [rf]\n  (let [data (doto (object-array 2)\n               (aset 0 []) (aset 1 []))]\n    (fn\n      ([] (rf))\n      ([r]\n       (assert (= [] (aget data 0) (aget data 1)))\n       (rf r))\n      ([r x]\n       (if (string? x)\n         (do (assert (= [] (aget data 1)))\n             (aset data 0 (conj (aget data 0) (decode-str x))) r)\n         (let [xs (decode-numbers x)]\n           (aset data 1 (into (aget data 1) xs))\n           (if (< (count xs) chunk-size)                  ; final frame\n             (let [x (conj (aget data 0) (aget data 1))]\n               (aset data 0 [])\n               (aset data 1 [])\n               (rf r x)) r)))))))\n\n(defn ^:deprecated encoder\n  \"A transducer expanding Electric events to a sequence of network messages.\"\n  [rf]\n  (fn\n    ([] (rf))\n    ([r] (rf r))\n    ([r x]\n     (let [r (reduce rf r (eduction (map encode) (pop x)))\n           r (reduce rf r (eduction (partition-all chunk-size) (map encode-numbers) (peek x)))]\n       (case (mod (count (peek x)) chunk-size)\n         0 (rf r (encode-numbers [])) r)))))\n\n(defn foreach\n  ([r] r)\n  ([r x] (r x) r))"]}