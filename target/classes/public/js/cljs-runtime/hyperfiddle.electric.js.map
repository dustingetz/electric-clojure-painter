{"version":3,"sources":["hyperfiddle/electric.cljc"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","js/hyperfiddle.electric.Pending","this","other","js/hyperfiddle.electric.Failure","cljs.core._EQ_","var_args","G__47107","hyperfiddle.electric/merge-vars","args-arr__5794__auto__","len__5769__auto__","i__5770__auto__","argseq__5795__auto__","cljs.core/IndexedSeq","seq47104","G__47105","cljs.core/first","cljs.core/next","G__47106","self__5754__auto__","fa","fb","not-found","ident","a","fs","cljs.core.reduce","hyperfiddle.electric.merge_vars","hyperfiddle.electric/eval","hyperfiddle.electric.impl.runtime/eval","hyperfiddle.electric/hook","hyperfiddle.electric.impl.runtime/hook","hyperfiddle.electric/bind","hyperfiddle.electric.impl.runtime/bind","hyperfiddle.electric/with","hyperfiddle.electric.impl.runtime/with","hyperfiddle.electric/pair","c","s","cljs.core.partial","cr47109-state","cr47109-place-0","cr47109-place-1","cr47109-place-2","cr47109-place-3","cr47109-place-4","cr47109-place-5","cljs.core/IMap","cr47109-place-6","cr47109-place-7","cr47109-place-8","cr47109-place-9","cr47109-place-10","cr47109-place-11","cr47109-place-12","cr47109-place-13","cr47109-place-14","cr47109-place-15","cr47109-place-16","cr47109-place-17","cr47109-place-18","cr47109-place-19","cr47109-place-20","cr47109-block-1","missionary.core/park","cr47109-exception","e47172","cr47109-place-21","missionary.core/unpark","e47206","cloroutine.impl/coroutine","G__47207","cljs.core.object_array","cr47109-block-0","missionary.core/sp-run","fexpr__47173","missionary.core/dfv","fexpr__47174","G__47203","G__47204","G__47205","fexpr__47202","missionary.core/join","G__47186","G__47187","fexpr__47185","x","cr47112-state","cr47112-place-0","cr47112-block-1","e47118","e47179","cr47112-exception","cr47112-place-1","cr47112-place-2","cr47112-place-3","cr47112-place-4","e47119","e47180","G__47122","cr47112-block-0","G__47121","fexpr__47120","G__47182","fexpr__47181","!","G__47184","fexpr__47183","p1__47108#","G__47199","G__47200","G__47201","fexpr__47198","cr47126-state","cr47126-place-0","cr47126-block-1","e47132","e47192","cr47126-exception","cr47126-place-1","cr47126-place-2","cr47126-place-3","cr47126-place-4","e47133","e47193","G__47136","cr47126-block-0","G__47135","fexpr__47134","G__47195","fexpr__47194","G__47197","fexpr__47196","hyperfiddle.electric/failure?","hyperfiddle.electric/wrap*","thunk","hyperfiddle.electric/chan-read!","contrib.missionary-contrib/chan-read!","hyperfiddle.electric/chan->ap","contrib.missionary-contrib/chan->ap","hyperfiddle.electric/chan->task","contrib.missionary-contrib/chan->task","G__47211","hyperfiddle.electric/task->cp","js/Error","!x","hyperfiddle.electric.task__GT_cp","pending","cr47212-state","cr47212-place-0","cr47212-block-1","cr47212-exception","e47215","cr47212-place-1","e47216","G__47217","cr47212-block-0","missionary.core/ap-run","missionary.core.reductions","hyperfiddle.electric/-check-fn-arity!","name","expected","actual","cljs.core.not_EQ_","cljs.core.ex_info","or__5045__auto__","cljs.core.pr_str","hyperfiddle.electric/watchable?","cljs.core/native-satisfies?","cljs.core/IWatchable","hyperfiddle.electric/checked-watch","missionary.core/watch","hyperfiddle.electric/-invalid-watch-usage-message","G__47221","hyperfiddle.electric/debounce-discreet","delay","flow","hyperfiddle.electric.debounce_discreet","init","cr47222-state","cr47222-place-21","cr47222-block-11","cr47222-exception","e47240","cr47222-block-12","cr47222-place-2","cr47222-place-9","cr47222-place-10","cr47222-place-11","cr47222-place-12","cr47222-block-9","cr47222-block-5","e47241","cr47222-place-18","cr47222-place-19","cr47222-place-20","missionary.core/none","cr47222-block-10","missionary.core/fork","e47242","cr47222-place-8","e47243","cr47222-block-4","e47244","cr47222-place-1","cr47222-place-4","cr47222-place-5","cr47222-place-6","cr47222-place-7","cr47222-block-3","e47245","cr47222-place-15","cr47222-block-8","e47249","cr47222-place-3","cr47222-place-22","e47250","cr47222-place-14","e47251","cr47222-block-2","e47252","cr47222-place-13","cr47222-block-7","cr47222-block-6","e47253","cr47222-place-16","cr47222-place-17","e47254","cr47222-place-0","cr47222-block-1","missionary.core/switch","e47255","G__47256","cr47222-block-0","G__47247","G__47248","fexpr__47246","missionary.core/sleep","js/missionary.Cancelled","hyperfiddle.electric/throttle","dur",">in","cr47257-state","cr47257-place-14","cr47257-exception","e47278","cr47257-place-12","cr47257-place-13","G__47280","cr47257-block-3","cr47257-block-4","cr47257-block-7","e47279","cr47257-place-19","cr47257-place-20","cr47257-place-21","cr47257-block-6","e47281","cr47257-place-5","cr47257-place-15","cr47257-block-8","e47282","cr47257-place-0","cr47257-place-1","cr47257-place-2","cr47257-place-3","cr47257-place-4","cr47257-block-1","e47283","cr47257-place-22","e47287","cr47257-place-16","cr47257-place-17","cr47257-place-18","cr47257-block-5","e47288","cr47257-place-6","cr47257-place-7","missionary.core/seed","cr47257-place-8","cljs.core/range","cr47257-place-9","cr47257-place-10","cr47257-place-11","cr47257-block-2","e47291","cr47257-place-23","cr47257-place-24","cr47257-place-25","cr47257-place-26","cr47257-place-27","e47296","G__47297","cr47257-block-0","G__47285","G__47286","fexpr__47284","missionary.core/relieve","G__47293","fexpr__47292","G__47295","fexpr__47294","G__47290","fexpr__47289"],"sourcesContent":["(ns hyperfiddle.electric\n  (:refer-clojure :exclude [eval def defn fn for empty? partial])\n  (:require [clojure.core :as cc]\n            contrib.missionary-contrib\n            [hyperfiddle.electric.impl.compiler :as c]\n            [hyperfiddle.electric.impl.runtime :as r]\n            [hyperfiddle.electric.impl.for :refer [map-by]]\n            #?(:clj [hyperfiddle.rcf.analyzer :as ana])     ; todo remove\n            [missionary.core :as m]\n            #?(:cljs [hyperfiddle.electric-client])\n            [hyperfiddle.electric.impl.io :as io]\n            [hyperfiddle.electric.debug :as dbg])\n  #?(:cljs (:require-macros [hyperfiddle.electric :refer [def defn fn vars boot for for-by local local-with run run-with debounce wrap]]))\n  (:import #?(:clj (clojure.lang IDeref))\n           (hyperfiddle.electric Pending Failure)\n           (missionary Cancelled)))\n\n;; Equality semantics for Failure and Pending\n;; For JVM, defined in java class.\n#?(:cljs\n   (extend-type Pending\n     IEquiv\n     (-equiv [this other]\n       (instance? Pending other))))\n\n#?(:cljs\n   (extend-type Failure\n     IEquiv\n     (-equiv [this other]\n       (and (instance? Failure other)\n            (= (.-error this) (.-error other))))))\n\n#?(:clj\n   (do\n     ;; Optionally, tell RCF not to rewrite Electric programs.\n     (defmethod ana/macroexpand-hook `hyperfiddle.electric/run [the-var form env args] (reduced `(hyperfiddle.electric/run ~@args))) ; optional\n     ;;(defmethod ana/macroexpand-hook `hyperfiddle.electric/run2 [_the-var _form _env args] `(hyperfiddle.electric/run2 ~@args))\n\n     ;; Don't expand cc/binding (prevent infinite loop). Explicit implicit do\n     (defmethod ana/macroexpand-hook 'clojure.core/binding [_the-var _form _env [bindings & body]] (reduced `(binding ~bindings (do ~@body))))\n     (defmethod ana/macroexpand-hook 'cljs.core/binding [_the-var _form _env [bindings & body]] (reduced `(binding ~bindings (do ~@body))))))\n\n(defmacro with-zero-config-entrypoint [& body]\n  `(try\n     (do ~@body)\n     (catch Pending _#) ; silently ignore\n     (catch Cancelled e# (throw e#)) ; bypass catchall, app is shutting down\n     (catch :default err# ; note client bias\n       (js/console.error\n         (str (ex-message err#) \"\\n\\n\" (dbg/stack-trace hyperfiddle.electric/trace))\n         err#))))\n\n(defmacro boot \"\nTakes an Electric program and returns a task setting up the full system with client part running locally and server part\nrunning on a remote host.\n\" [& body]\n  (assert (:js-globals &env))\n  (let [[client server] (c/analyze\n                          (assoc &env ::c/peers-config {::c/local :cljs ::c/remote :clj})\n                          `(with-zero-config-entrypoint ~@body))]\n    `(hyperfiddle.electric-client/boot-with-retry\n       ~(r/emit (gensym) client)\n       (hyperfiddle.electric-client/connector (quote ~server)))))\n\n(defmacro vars \"\n  Turns an arbitrary number of symbols resolving to vars into a map associating the fully qualified symbol\n  of this var to the value currently bound to this var.\n  \" [& forms] (c/vars &env forms))\n\n(cc/defn merge-vars\n  ([fa fb]\n   (cc/fn [not-found ident]\n     (let [a (fa not-found ident)]\n       (if (= not-found a)\n         (fb not-found ident)\n         a))))\n  ([fa fb & fs]\n   (reduce merge-vars (merge-vars fa fb) fs)))\n\n(def eval \"Takes a resolve map and a program, returns a booting function.\n  The booting function takes\n  * as first argument a function Any->Task[Unit] returned task writes the value on the wire.\n  * as second argument a flow producing the values read on the wire.\n  and returning a task that runs the local reactor.\"\n  r/eval)\n\n(def hook r/hook)\n(def bind r/bind) ; for when you want to spawn a e/fn without a new\n(def with r/with)\n\n(cc/defn pair [c s]\n  (m/sp\n    (let [s->c (m/dfv)\n          c->s (m/dfv)]\n      (m/?\n        (m/join {}\n          (s (cc/fn [x] (m/sp ((m/? s->c) x)))\n            (cc/fn [!] (c->s !) #()))\n          (c (cc/fn [x] (m/sp ((m/? c->s) x)))\n            (cc/fn [!] (s->c !) #())\n            #(throw %)))))))\n\n(defmacro local\n  \"Single peer loopback system without whitelist. Returns boot task.\"\n  [& body]\n                                        ; use compiler (client) because no need for exports\n  (let [[client server] (c/analyze &env `(do ~@body))]\n    `(pair ~(r/emit (gensym) client) ~(r/emit (gensym) server))))\n\n(defmacro local-with\n  \"Single peer loopback system with whitelist. Returns boot task.\"\n  [vars & body]\n  (let [[client server] (c/analyze &env `(do ~@body))]\n    `(pair ~(r/emit (gensym) client) (r/eval ~vars (quote ~server)))))\n\n(defmacro run \"test entrypoint without whitelist.\" [& body]\n  `((local ~@body) (cc/fn [_#]) (cc/fn [_#])))\n\n(defmacro run-with \"test entrypoint with whitelist.\" [vars & body]\n  `((local-with ~vars ~@body) (cc/fn [_#]) (cc/fn [_#])))\n\n(cc/defn failure? [x] (instance? Failure x))\n\n(cc/defn wrap* [thunk]\n  #?(:clj\n     (->> (m/ap (m/? (m/via m/blk (thunk))))\n          (m/reductions {} (Failure. (Pending.)))\n          (m/relieve {}))))\n\n(defmacro wrap \"Run blocking clojure code body (io-bound) on a threadpool. JVM only\"\n  [& body]\n  `(new (wrap* (cc/fn [] (do ~@body)))))\n\n; Should these be in missionary?\n(def chan-read! contrib.missionary-contrib/chan-read!)\n(def chan->ap contrib.missionary-contrib/chan->ap)\n(def chan->task contrib.missionary-contrib/chan->task)\n;(def chan->cp contrib.missionary-contrib/chan->cp)\n\n(cc/defn task->cp ; leo to review\n  ([!x] (task->cp !x (Failure. (Pending.)))) ; note Electric dependency\n  ([!x pending] (->> (m/ap (m/? !x)) (m/reductions {} pending))))\n\n(defmacro use-channel ;; TODO rename\n  ([chan] `(use-channel nil ~chan))\n  ([init chan] `(new (m/reductions {} ~init (chan->ap ~chan)))))\n\n;; --------------------------------------\n\n(defmacro def\n  ([symbol] `(hyperfiddle.electric/def ~symbol ::c/unbound))\n  ([symbol docstring init]\n   (assert (string? docstring))\n   (#'def &form &env (vary-meta symbol assoc :doc docstring) init))\n  ([symbol init]\n   ;; GG: Expand to an unbound var with body stored in ::c/node meta.\n   ;;     Clojure compiler will analyze vars metas, which would analyze form as clojure, so we quote it.\n   ;;     ClojureScript do not have vars at runtime and will not analyze or emit vars meta. No need to quote.\n   `(def ~(vary-meta symbol assoc ::c/node (if (:js-globals &env) init `(quote ~init))))))\n\n(cc/defn -check-fn-arity! [name expected actual]\n  (when (not= expected actual)\n    (throw (ex-info (str \"You called \" (or name (pr-str ::unnamed-efn)) \", a \" expected \"-arg e/fn with \" actual \" arguments.\")\n             {:name name}))))\n\n;; TODO self-refer\n(defmacro fn [name? & [args & body]]\n  (let [[name? args body] (if (symbol? name?) [name? args body]\n                              [nil name? (cons args body)])]\n    (if (bound? #'c/*env*)\n      `(::c/closure\n        ;; Beware, `do` is implemented with `m/latest`, which evaluates\n        ;; arguments in parallel. The e/fn body will be called even if arity is\n        ;; incorrect, then the arity exception will be thrown. This might be\n        ;; confusing to users in presence of effects. Same as `(do (assert\n        ;; false) (prn 42))`: 42 is printed anyway. This is a broader question\n        ;; than \"what should the semantics of e/fn should be\", so we decided to\n        ;; be consistent with the current model and to not introduce a specific\n        ;; behavior for e/fn.\n        (do (-check-fn-arity! '~name? ~(count args) c/%arity)\n            (binding [c/rec (::c/closure (let [~@(interleave args c/arg-sym)] ~@body))]\n              (new c/rec ~@(take (count args) c/arg-sym))))\n        ~{::dbg/name name?, ::dbg/args args, ::dbg/type (or (::dbg/type (meta name?)) :reactive-fn)\n          ::dbg/meta (merge (select-keys (meta &form) [:file :line])\n                       (select-keys (meta name?) [:file :line]))})\n      `(throw (ex-info \"Invalid e/fn in Clojure code block (use from Electric code only)\" ~(into {} (meta &form)))))))\n\n; syntax quote doesn't qualify special forms like 'def\n(defmacro defn [sym & fdecl]\n  (let [[_defn sym' & _] (macroexpand `(cc/defn ~sym ~@fdecl))] ; GG: docstring support\n    `(hyperfiddle.electric/def ~sym' (hyperfiddle.electric/fn ~(vary-meta sym' merge {::dbg/type :reactive-defn}\n                                                                          (meta &form)\n                                                                          (meta sym'))\n                                                              ~@(if (string? (first fdecl)) ; GG: skip docstring\n                                         (rest fdecl)\n                                         fdecl)))))\n\n(defmacro for-by [kf bindings & body]\n  (if-some [[s v & bindings] (seq bindings)]\n    `(let [xs# ~v]\n       (new (r/bind map-by ~kf\n              ~(->> body\n                 (list* `for-by kf bindings)\n                 (list `let [s (first c/arg-sym)])\n                 (list `fn [])\n                 (list `cc/partial (list ::c/inject (first c/arg-sym))))\n              (::c/lift xs#))))\n    (cons `do body))) ; todo, buggy: (e/for [x []] (println 42)) should not print\n\n(defmacro for [bindings & body]\n  `(hyperfiddle.electric/for-by identity ~bindings ~@body))\n\n(cc/defn ^:no-doc watchable? [x]\n  #?(:clj (instance? clojure.lang.IRef x)\n     :cljs (satisfies? IWatchable x)))\n\n(cc/defn ^:no-doc checked-watch [!x]\n  (assert (watchable? !x) \"Provided argument is not Watchable.\")\n  (m/watch !x))\n\n(def -invalid-watch-usage-message \"Invalid e/watch (use from Electric code only, maybe you forgot a e/def?)\")\n\n(defmacro watch \"for tutorials (to delay teaching constructor syntax); m/watch is also idiomatic\"\n  [!x]\n  (if (bound? #'c/*env*)\n    `(new (checked-watch ~!x))\n    `(throw (ex-info -invalid-watch-usage-message ~(into {} (meta &form))))))\n\n(cc/defn debounce-discreet\n  ([delay flow] (debounce-discreet delay nil flow))\n  ([delay init flow] (m/reductions {} init (m/ap (let [x (m/?< flow)]\n                                                   (try (m/? (m/sleep delay x))\n                                                        (catch Cancelled _ (m/amb))))))) )\n\n(defmacro ^:deprecated debounce ; immoral? introduces avoidable delays\n  \"Debounce a continous flow by `delay` milliseconds.\"\n  [delay flow]\n  `(new (->> (fn [] ~flow)\n             (debounce-discreet ~delay)\n             (m/relieve {}))))\n\n(cc/defn throttle [dur >in] ; in CLJ, wrong number of args (1) passed to: hyperfiddle.electric-ui4/long --- ?????\n  (m/ap\n    (let [x (m/?> (m/relieve {} >in))]\n      (m/amb x (do (m/? (m/sleep dur)) (m/amb))))))\n\n(defmacro ^:deprecated remote [& body]\n  (if (= 1 (count body))\n    `(unquote-splicing ~@body)\n    `(unquote-splicing (do ~@body))))\n\n(defmacro client [& body]\n  (if (bound? #'c/*env*)\n    `(::c/client (do ~@body) ~(assoc (meta &form) ::dbg/type :transfer, ::dbg/name ::client))\n    `(throw (ex-info \"Invalid e/client in Clojure code block (use from Electric code only)\" ~(into {} (meta &form))))))\n\n(defmacro server [& body]\n  (if (bound? #'c/*env*)\n    `(::c/server (do ~@body) ~(assoc (meta &form) ::dbg/type :transfer, ::dbg/name ::server))\n    `(throw (ex-info \"Invalid e/server in Clojure code block (use from Electric code only)\" ~(into {} (meta &form))))))\n\n(defmacro discard\n  \"Silence \\\"Unserializable reference transfer\\\"; inlining `(do ... nil)` is idiomatic as well\"\n  [& body] `(do ~@body nil))\n\n(hyperfiddle.electric/def trace \"In a `catch` block, bound by the runtime to the current stacktrace. An Electric stacktrace is an ExceptionInfo. Use `hyperfiddle.electric.debug/stack-trace` to get a string representation.\" nil)\n\n(defmacro lexical-env \"Return a map containing lexical bindings\" []\n  (let [env (if (:js-globals &env) (:locals &env) &env)]\n    (with-meta\n      `{:env ~(reduce-kv (cc/fn [r k v] (assoc r (list 'quote k) k)) (empty env) env)}\n      (meta &form))))\n\n(defmacro with-cycle\n  \"evaluates body with symbol s bound to the previous result of the body evaluation.\n  the first evaluation binds s to i.\"\n  [[s i] & body]\n  `(let [a# (atom ~i) ~s (hyperfiddle.electric/watch a#)]\n     (reset! a# (do ~@body))))\n\n(defmacro partial-dynamic\n  \"Return a function calling given function `f` with given dynamic environment.\"\n  [bindings f]\n  `(cc/fn [& args#] (binding ~bindings (apply ~f args#))))\n\n(defmacro partial\n  \"Like `cc/partial` for reactive functions. Requires the target function\n  arity (`argc`) until reactive function supports variadic arguments.\n\n  e.g. (new (partial 2 (e/fn [a b] [a b]) :a) :b) ;; => [:a :b]\"\n  [argc F & args]\n  (if (= 0 argc)\n    F\n    (let [rest-args (map #(symbol (str \"arg_\" %)) (range (- argc (count args))))]\n      `(let [F# ~F]\n         (hyperfiddle.electric/fn ~@(when (symbol? F) [F]) [~@rest-args]\n                                  (new F# ~@args ~@rest-args))))))\n\n;; WIP: user space socket reconnection\n\n#_\n(hyperfiddle.electric/def ^{:doc \"\n`true` if the main process was cancelled, `false` otherwise.\n\"} cancelled (new r/cancelled))\n\n#_\n(hyperfiddle.electric/def ^{:doc \"\n`true` if the link to the remote peer is up, `false` otherwise. May throw Pending during connection.\n\"} connected (new r/connected))\n\n#_\n(hyperfiddle.electric/defn Entrypoint [App]\n  (or cancelled\n    (not= :waiting\n      (with-cycle [s {:status :connecting :delay 1000}]\n        (try (App.) (catch :default e (.error js/console e)))\n        (case (:status s)\n          :waiting (let [{:keys [since delay]} s\n                         remaining (-> since (+ delay) (- time))]\n                     (if (pos? remaining)\n                       (do (println (str \"Retrying in \" (int (/ remaining 1000)) \"s.\")) s)\n                       (do (println \"Connecting...\")\n                           (-> s\n                             (dissoc :since)\n                             (assoc :status :connecting)))))\n          :connecting (try (if connected\n                             (do (println \"Connected.\")\n                                 (-> s\n                                   (dissoc :delay)\n                                   (assoc :status :connected)))\n                             (do (println \"Failed to reconnect.\")\n                                 (-> s\n                                   (update :delay * 2)\n                                   (assoc :status :waiting\n                                          :since time))))\n                           (catch Pending _ s))\n          :connected (if connected\n                       s (do (println \"Connection reset.\")\n                             {:status :waiting\n                              :since  time\n                              :delay  1000})))))))"]}