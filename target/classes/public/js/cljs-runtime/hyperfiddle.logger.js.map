{"version":3,"sources":["hyperfiddle/logger.cljc"],"mappings":"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","names":["hyperfiddle.logger/levels","js/goog.define","hyperfiddle.logger/LEVEL","hyperfiddle.logger/*LEVEL*","cljs.core.keyword","hyperfiddle.logger/set-level!","level","js/Error","fexpr__43361","cljs.core/set","rank","cljs.core/zipmap","cljs.core.range","cljs.core/count","hyperfiddle.logger/active?","hyperfiddle.logger/js-prefix","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","hyperfiddle.logger/log*","seq43362","G__43363","cljs.core/first","cljs.core/next","G__43364","self__5754__auto__","ns","args","logger","G__43365","cljs.core/Keyword","js/console.debug","js/console.info","js/console.warn","js/console.error","js/console.log","cljs.core.apply","cljs.core.get","hyperfiddle.logger/gen-log","env","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List"],"sourcesContent":["(ns ^:no-doc hyperfiddle.logger\n  \"An Electric compatible logger. Not public API.\n  Thin uniform macro wrapper on top of clojure.tools.logging and js/console.log|warn|error.\n  `Timbre` relies on `cc/fn`, which is not yet supported by Electric. It will be at some point.\n  `cc/print` flushes to `*out*` immediately, concurrent writes produces gibberish. A proper logger\n  sequences writes.\n  To be removed when timbre (or an equivalent) is supported by Electric.\n  Backed by clojure.tools.logging > backed by SLF4J > backed by logback. See logback.xml.\"\n\n  ; G: The reason this logger exists is because it uses a queue to sequence effects (prints) at the repl,\n  ; otherwise they interleave. Timbre does the same thing. Timbre has a complex\n  ; Q is if the timbre macroexpansion is too complex for electric to handle properly? we should check.\n  ; and it should be compatible with clojure & coojurescript\n\n  (:refer-clojure :exclude [time])\n  #?(:clj (:require [clojure.tools.logging :as log]\n                    [clojure.tools.logging.impl :as impl])\n     :cljs (:require-macros [hyperfiddle.logger :refer [log debug info trace warn error]])))\n\n(def levels [:trace :debug :info :warn :error])\n\n#?(:cljs (goog-define LEVEL \"debug\")) ; Set log level as cljs compile time constant.\n\n(def ^:dynamic *LEVEL* #?(:clj :debug, :cljs (keyword LEVEL)))\n\n(defn ^:export set-level! \"Set runtime log level. See `hyperfiddle.logger/levels`.\"\n  [level]\n  (let [level (if (string? level) (keyword level) level)]\n    (assert ((set levels) level) \"Invalid log level.\")\n    #?(:clj (alter-var-root #'*LEVEL* (constantly level))\n       :cljs (set! *LEVEL* level))))\n\n(let [rank (zipmap levels (range (count levels)))]\n  (defn active? [level]\n    (>= (rank level) (rank *LEVEL*))))\n\n(def js-prefix {:trace \"\u26aa TRACE\"\n                :debug \"\ud83d\udc1b DEBUG\"\n                :info  \"\u2139\ufe0f INFO\"\n                :warn  \"  WARN\"\n                :error \"  ERROR\"})\n\n(defn log*\n  \"When Electric compiles to clojurescript, the server peer still don't know about the js/ namespace.\"\n  [level ns & args]\n  (when (active? level)\n    #?(:clj  (let [logger (impl/get-logger log/*logger-factory* ns)]\n               (if (instance? Exception (first args))\n                 (log/log* logger level (first args) (apply print-str (rest args)))\n                 (log/log* logger level nil (apply print-str args))))\n       :cljs (let [logger (case level\n                            (:trace :debug) js/console.debug\n                            :info           js/console.info\n                            :warn           js/console.warn\n                            :error          js/console.error\n                            js/console.log)]\n               (apply logger (get js-prefix level \"\") ns args)))))\n\n(defn- gen-log [level env args]\n  (if (:js-globals env)\n    `(log* ~level ~(str (:name (:ns env))) ~@args)\n    `(when (active? ~level)\n       (log/logp ~level ~@args))))\n\n(defmacro log   [level & args] (gen-log level &env args))\n(defmacro trace [& args] (gen-log :trace &env args))\n(defmacro debug [& args] (gen-log :debug &env args))\n(defmacro info  [& args] (gen-log :info  &env args))\n(defmacro warn  [& args] (gen-log :warn  &env args))\n(defmacro error [& args] (gen-log :error &env args))\n\n;; `FATAL` level not implemented because:\n;; - it\u2019s not a thing in `js/console`\n;; - `clojure.tools.logging` rewrites it silently to `ERROR`. Highly confusing.\n;;    reason: SLF4J don\u2019t support it by default http://www.slf4j.org/faq.html#fatal .\n\n(defmacro time\n  \"Evaluates expr and prints the time it took.  Returns the value of\n expr.\"\n  [message expr]\n  `(let [start# (. System (nanoTime))\n         ret# ~expr]\n     (prn (str ~message \" - elapsed time: \" (/ (double (- (. System (nanoTime)) start#)) 1000000.0) \" msecs\"))\n     ret#))\n"]}